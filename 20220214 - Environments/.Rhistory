}
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
return("Grif!")
}
if(which.max(a) == 2){
return("Sly!")
}
if(which.max(a) == 3){
return("Rav!")
}
if(which.max(a) == 4){
return("Huff!")
}
}
sort.student(jake)
# Code
new_student <- function(name){
output <- list(
name = name,
courage = ceiling(runif(1, min = 0, max = 100)),
ambition = ceiling(runif(1, min = 0, max = 100)),
intelligence = ceiling(runif(1, min = 0, max = 100)),
effort = ceiling(runif(1, min = 0, max = 100))
)
class(output) <- "student"
return(output)
}
validate_student <- function(student){
if (class(student) != "student"){
stop("This is not a student!")
}
}
set.seed(666)
jake <- new_student("jake")
View(jake)
# Code
sort <- function(student){
UseMethod("sort")
}
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
return("Grif!")
}
if(which.max(a) == 2){
return("Sly!")
}
if(which.max(a) == 3){
return("Rav!")
}
if(which.max(a) == 4){
return("Huff!")
}
}
sort.student(jake)
# Code
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
class(student) <- c(class(student), "Grif")
}
if(which.max(a) == 2){
class(student) <- c(class(student), "Sly")
}
if(which.max(a) == 3){
class(student) <- c(class(student), "Rav")
}
if(which.max(a) == 4){
class(student) <- c(class(student), "Huff")
}
print(paste0(class(student)[2], "!"))
#return(class(student))
}
# Gotta recreate jake for the new version to work
rm(jake)
set.seed(666)
new_student(jake)
# Code
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
class(student) <- c(class(student), "Grif")
}
if(which.max(a) == 2){
class(student) <- c(class(student), "Sly")
}
if(which.max(a) == 3){
class(student) <- c(class(student), "Rav")
}
if(which.max(a) == 4){
class(student) <- c(class(student), "Huff")
}
print(paste0(class(student)[2], "!"))
#return(class(student))
}
# Gotta recreate jake for the new version to work
rm(jake)
set.seed(666)
new_student(jake)
# Code
new_student <- function(name){
output <- list(
name = name,
courage = ceiling(runif(1, min = 0, max = 100)),
ambition = ceiling(runif(1, min = 0, max = 100)),
intelligence = ceiling(runif(1, min = 0, max = 100)),
effort = ceiling(runif(1, min = 0, max = 100))
)
class(output) <- "student"
return(output)
}
validate_student <- function(student){
if (class(student) != "student"){
stop("This is not a student!")
}
}
set.seed(666)
jake <- new_student("jake")
# Code
sort <- function(student){
UseMethod("sort")
}
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
return("Grif!")
}
if(which.max(a) == 2){
return("Sly!")
}
if(which.max(a) == 3){
return("Rav!")
}
if(which.max(a) == 4){
return("Huff!")
}
}
sort.student(jake)
# Code
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
class(student) <- c(class(student), "Grif")
}
if(which.max(a) == 2){
class(student) <- c(class(student), "Sly")
}
if(which.max(a) == 3){
class(student) <- c(class(student), "Rav")
}
if(which.max(a) == 4){
class(student) <- c(class(student), "Huff")
}
print(paste0(class(student)[2], "!"))
#return(class(student))
}
# Gotta recreate jake for the new version to work
rm(jake)
set.seed(666)
new_student(jake)
# Code
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
class(student) <- c(class(student), "Grif")
}
if(which.max(a) == 2){
class(student) <- c(class(student), "Sly")
}
if(which.max(a) == 3){
class(student) <- c(class(student), "Rav")
}
if(which.max(a) == 4){
class(student) <- c(class(student), "Huff")
}
print(paste0(class(student)[2], "!"))
#return(class(student))
}
# Gotta recreate jake for the new version to work
rm(jake)
set.seed(666)
jake <- new_student(jake)
# Code
new_student <- function(name){
output <- list(
name = name,
courage = ceiling(runif(1, min = 0, max = 100)),
ambition = ceiling(runif(1, min = 0, max = 100)),
intelligence = ceiling(runif(1, min = 0, max = 100)),
effort = ceiling(runif(1, min = 0, max = 100))
)
class(output) <- "student"
return(output)
}
validate_student <- function(student){
if (class(student) != "student"){
stop("This is not a student!")
}
}
set.seed(666)
jake <- new_student("jake")
# Code
sort <- function(student){
UseMethod("sort")
}
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
return("Grif!")
}
if(which.max(a) == 2){
return("Sly!")
}
if(which.max(a) == 3){
return("Rav!")
}
if(which.max(a) == 4){
return("Huff!")
}
}
sort.student(jake)
# Code
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
class(student) <- c(class(student), "Grif")
}
if(which.max(a) == 2){
class(student) <- c(class(student), "Sly")
}
if(which.max(a) == 3){
class(student) <- c(class(student), "Rav")
}
if(which.max(a) == 4){
class(student) <- c(class(student), "Huff")
}
print(paste0(class(student)[2], "!"))
#return(class(student))
}
# Gotta recreate jake for the new version to work
rm(jake)
set.seed(666)
jake <- new_student(jake)
# Code
sort <- function(student){
UseMethod("sort")
}
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
return("Grif!")
}
if(which.max(a) == 2){
return("Sly!")
}
if(which.max(a) == 3){
return("Rav!")
}
if(which.max(a) == 4){
return("Huff!")
}
}
sort.student(jake)
# Code
new_student <- function(name){
output <- list(
name = name,
courage = ceiling(runif(1, min = 0, max = 100)),
ambition = ceiling(runif(1, min = 0, max = 100)),
intelligence = ceiling(runif(1, min = 0, max = 100)),
effort = ceiling(runif(1, min = 0, max = 100))
)
class(output) <- "student"
return(output)
}
validate_student <- function(student){
if (class(student) != "student"){
stop("This is not a student!")
}
}
set.seed(666)
jake <- new_student("jake")
# Code
sort <- function(student){
UseMethod("sort")
}
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
return("Grif!")
}
if(which.max(a) == 2){
return("Sly!")
}
if(which.max(a) == 3){
return("Rav!")
}
if(which.max(a) == 4){
return("Huff!")
}
}
sort.student(jake)
# Code
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
class(student) <- c(class(student), "Grif")
}
if(which.max(a) == 2){
class(student) <- c(class(student), "Sly")
}
if(which.max(a) == 3){
class(student) <- c(class(student), "Rav")
}
if(which.max(a) == 4){
class(student) <- c(class(student), "Huff")
}
print(paste0(class(student)[2], "!"))
#return(class(student))
}
# Gotta recreate jake for the new version to work
rm(jake)
set.seed(666)
jake <- new_student(jake)
set.seed(666)
jake <- new_student("jake")
knitr::opts_chunk$set(echo = TRUE)
# Code
new_student <- function(name){
output <- list(
name = name,
courage = ceiling(runif(1, min = 0, max = 100)),
ambition = ceiling(runif(1, min = 0, max = 100)),
intelligence = ceiling(runif(1, min = 0, max = 100)),
effort = ceiling(runif(1, min = 0, max = 100))
)
class(output) <- "student"
return(output)
}
validate_student <- function(student){
if (class(student) != "student"){
stop("This is not a student!")
}
}
set.seed(666)
jake <- new_student("jake")
# Code
sort <- function(student){
UseMethod("sort")
}
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
return("Grif!")
}
if(which.max(a) == 2){
return("Sly!")
}
if(which.max(a) == 3){
return("Rav!")
}
if(which.max(a) == 4){
return("Huff!")
}
}
sort.student(jake)
# Code
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
class(student) <- c(class(student), "Grif")
}
if(which.max(a) == 2){
class(student) <- c(class(student), "Sly")
}
if(which.max(a) == 3){
class(student) <- c(class(student), "Rav")
}
if(which.max(a) == 4){
class(student) <- c(class(student), "Huff")
}
print(paste0(class(student)[2], "!"))
#return(class(student))
}
# Gotta recreate jake for the new version to work
rm(jake)
set.seed(666)
jake <- new_student("jake")
class(jake) <- sort.student(jake)
class(jake) <- sort.student(jake)
# Code
sort.student <- function(student){
#validate_student(student)
a <- cbind(student$courage,
student$ambition,
student$intelligence,
student$effort)
if(which.max(a) == 1){
class(student) <- c(class(student), "Grif")
}
if(which.max(a) == 2){
class(student) <- c(class(student), "Sly")
}
if(which.max(a) == 3){
class(student) <- c(class(student), "Rav")
}
if(which.max(a) == 4){
class(student) <- c(class(student), "Huff")
}
print(paste0(class(student)[2], "!"))
return(class(student))
}
class(jake) <- sort.student(jake)
# Gotta recreate jake for the new version to work
rm(jake)
set.seed(666)
jake <- new_student("jake")
class(jake) <- sort.student(jake)
# Code
library(rlang)
grif_tower <- env(dorm = "grif tower")
black_lake <- env(dorm = "lake")
rav_tower <- env(dorm = "rav tower")
basement <- env(dorm = "mom's basement")
curfew <- function(student){
UseMethod("curfew")
}
curfew <- function(student){
#validate_student(student)
print(class(student)[2])
if(class(student)[2] == "Grif"){
assign(deparse(substitute(student)),
student,
envir = grif_tower)
}
if(class(student)[2] == "Sly"){
assign(deparse(substitute(student)),
student,
envir = black_lake)
}
if(class(student)[2] == "Rav"){
assign(deparse(substitute(student)),
student,
envir = rav_tower)
}
if(class(student)[2] == "Huff"){
assign(deparse(substitute(student)),
student,
envir = basement)
}
}
curfew(jake)
rm(jake)
rav_tower$jake
